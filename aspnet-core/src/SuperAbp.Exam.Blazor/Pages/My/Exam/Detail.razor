@page "/my/exam/{id:guid}"
@using Microsoft.Extensions.Localization
@using SuperAbp.Exam.ExamManagement.UserExamQuestions
@using SuperAbp.Exam.ExamManagement.UserExams
@using SuperAbp.Exam.Localization
@using SuperAbp.Exam.QuestionManagement.Questions

<GridRow Gutter="16">
    <GridCol Span="4">
        <Affix OffsetTop="10">
            <QuestionNumber CurrentId="_questions[0].Questions[0].QuestionId"
            Numbers="_questions"></QuestionNumber>
        </Affix>
    </GridCol>
    <GridCol Span="16">
        <Card class="question-content">
            <ChildContent>
                @if (loading)
                {
                    <Spin />
                }
                else
                {
                    int number = 1, bigNumber = 1;
                    foreach (KeyValuePair<int, int> questionType in _questionTypes)
                    {
                        var currentQuestions = _examQuestions.Where(q => q.QuestionType == questionType.Key).ToArray();
                        <h2>@chineseNumber[bigNumber++]、@L["QuestionType:" + questionType.Key]题（共@(questionType.Value)题，合计@(currentQuestions.Sum(q => q.Score))分）</h2>
                        foreach (UserExamDetailDto.QuestionDto examQuestion in currentQuestions)
                        {
                            IReadOnlyList<QuestionAnswerViewModel> answers = ToQuestionAnswerViewModels(examQuestion.Options);
                            <h3 class="title">
                                <span class="number">@(number++)</span>
                                <span>@examQuestion.Content</span>
                            </h3>
                            @switch (QuestionType.FromValue(examQuestion.QuestionType).Name)
                            {
                                case nameof(QuestionType.SingleSelect):
                                case nameof(QuestionType.Judge):
                                    <SingleSelect QuestionId="examQuestion.Id"
                                    Answered="@examQuestion.Answers"
                                    Answers="answers"
                                    ShowAnalysis="true"></SingleSelect>
                                    break;
                                case nameof(QuestionType.MultiSelect):
                                    <MultiSelect QuestionId="examQuestion.Id"
                                    Answered="@examQuestion.Answers"
                                    Answers="answers"
                                    ShowAnalysis="true"></MultiSelect>
                                    break;
                                case nameof(QuestionType.FillInTheBlanks):
                                    <Blank QuestionId="examQuestion.Id"
                                    Answered="@examQuestion.Answers"
                                    Answers="answers"
                                    ShowAnalysis="true"
                                    ShowConfirm="false"></Blank>
                                    break;
                            }
                            <div class="card">
                                <Descriptions class="desc" Column="1">
                                    @if(examQuestion.Right.HasValue)
                                    {
                                        <div style="font-size:24px;margin-bottom: 5px;">
                                            @if (examQuestion.Right.Value)
                                            {
                                                <Icon Type="check-circle" Style="color: green;" Theme="IconThemeType.Outline" />
                                                <span>正确</span>
                                            }
                                            else
                                            {
                                                <Icon Type="close-circle" Style="color: red;" Theme="IconThemeType.Outline" />
                                                <span>错误</span>
                                            }
                                        </div>
                                    }
                                    @if (examQuestion.Score > 0)
                                    {
                                        <DescriptionsItem Title="得分">@examQuestion.Score</DescriptionsItem>
                                    }
                                    @if (examQuestion.QuestionType == QuestionType.FillInTheBlanks.Value)
                                    {
                                        <DescriptionsItem Title="正确答案">@(string.Join(ExamConsts.Splitter, examQuestion.Options.Select(a => a.Content)))</DescriptionsItem>
                                    }
                                    @if (examQuestion.KnowledgePoints.Count > 0)
                                    {
                                        <DescriptionsItem Title="@L["KnowledgePoint"]">
                                            @foreach (string knowledgePoint in examQuestion.KnowledgePoints)
                                            {
                                                <Tag>@knowledgePoint</Tag>
                                            }
                                        </DescriptionsItem>
                                    }
                                    @if (!String.IsNullOrEmpty(examQuestion.Analysis))
                                    {
                                        <DescriptionsItem Title="题目解析">@examQuestion.Analysis</DescriptionsItem>
                                    }
                                </Descriptions>
                            </div>
                        }
                    }
                }
            </ChildContent>
        </Card>
    </GridCol>
</GridRow>

@inject IStringLocalizer<ExamResource> L
@inject IUserExamAppService UserExamAppService
@inject IUserExamQuestionAppService UserExamQuestionAppService
@code {
    [Parameter]
    public Guid Id { get; set; }

    bool loading = true;
    string[] chineseNumber = ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];
    IReadOnlyList<UserExamDetailDto.QuestionDto> _examQuestions = Array.Empty<UserExamDetailDto.QuestionDto>();
    Dictionary<int, int> _questionTypes = new();
    List<QuestionNumberVo> _questions = [];

    protected override async Task OnInitializedAsync()
    {
        UserExamDetailDto dto = await UserExamAppService.GetAsync(Id);
        _examQuestions = dto.Questions;
        _questionTypes = _examQuestions.GroupBy(q => q.QuestionType).Select(q => new
        {
            QuestionType = q.Key,
            Count = q.Count()
        }).ToDictionary(key => key.QuestionType, value => value.Count);
        foreach (KeyValuePair<int, int> item in _questionTypes)
        {
            QuestionNumberVo vo = new QuestionNumberVo()
                {
                    QuestionType = item.Key,
                    Questions = dto.Questions.Where(q => q.QuestionType == item.Key)
                        .Select(q => new QuestionNumberVo.QuestionIndex()
                        {
                            QuestionId = q.Id,
                            QuestionScore = q.QuestionScore
                        }).ToArray()
                };
            vo.TotalScore = vo.Questions.Sum(q => q.QuestionScore ?? 0);
            _questions.Add(vo);
        }
        loading = false;
    }
    protected IReadOnlyList<QuestionAnswerViewModel> ToQuestionAnswerViewModels(IEnumerable<UserExamDetailDto.QuestionDto.OptionDto> answers)
    {
        return answers
            .Select(qa => new QuestionAnswerViewModel
            {
                Id = qa.Id,
                Content = qa.Content,
                Right = qa.Right ?? false
            }).ToArray();
    }

    protected string GetUserAnswer(string answerIds, IReadOnlyList<QuestionAnswerViewModel> answers)
    {
        return String.Join(",", answerIds
            .Split(ExamConsts.Splitter)
            .Select(a => answers.ToArray().FindIndex(b => b.Id.ToString() == a))
            .Where(a => a > -1)
            .Select(a => Convert.ToChar(65 + a)));
    }
}