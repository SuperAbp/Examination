@page "/my/favorite"

<Card Title="@L["MyFavorite"]">
    <Form style="margin-bottom: 16px;"
          Layout="FormLayout.Inline"
          Model="@parameter"
          OnFinish="Search">
        <FormItem>
            <Input Placeholder="@L["QuestionContent"]" @bind-Value="@context.QuestionContent" />
        </FormItem>
        <FormItem>
            <Select @bind-Value="@context.QuestionType"
                    TItem="string"
                    TItemValue="int?"
                    AllowClear="true"
                    Placeholder="@L["QuestionType"]"
                    Style="width: 120px;">
                <SelectOptions>
                    @foreach (QuestionType item in QuestionType.List)
                    {
                        <SelectOption TItemValue="int?" TItem="string" Value="item.Value" Label="@(L["QuestionType:" + item.Value])" />
                    }
                </SelectOptions>
            </Select>
        </FormItem>
        <FormItem>
            <Button Type="ButtonType.Primary" HtmlType="submit">
                @L["Search"]
            </Button>
            <Button OnClick="Reset">
                @L["Reset"]
            </Button>
            <Button OnClick="StartAsync">@L["StartTraining"]</Button>
        </FormItem>
    </Form>

    <Table TItem="FavoriteListDto"
           @ref="Table"
           DataSource="@_favorites"
           Total="_totalCount"
           Loading="_loading"
           RowKey="x=>x.Id"
           @bind-PageIndex="_currentPage"
           @bind-PageSize="_pageSize"
           OnChange="Change">
        <PropertyColumn Property="c => c.QuestionContent" Title="@L["QuestionContent"]" />
        <PropertyColumn Property="c => c.QuestionType" Title="@L["QuestionType"]" >
            @L["QuestionType:" + context.QuestionType]
        </PropertyColumn>
        <PropertyColumn Property="c => c.CreationTime" Title="@L["CreationTime"]" />
        <ActionColumn Title="@L["Action"]">
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" OnClick="()=>StartAsync(context.QuestionId)">@L["StartTraining"]</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</Card>

@using AntDesign.TableModels
@using Microsoft.Extensions.Localization
@using SuperAbp.Exam.Favorites
@using SuperAbp.Exam.Localization
@using SuperAbp.Exam.QuestionManagement.Questions
@using System.Text
@using Volo.Abp.AspNetCore.Components.Notifications
@inject IStringLocalizer<ExamResource> L
@inject NavigationManager Navigation
@inject IFavoriteAppService FavoriteAppService
@inject IUiNotificationService NotificationService
@code {
    Table<FavoriteListDto> Table;
    IReadOnlyList<FavoriteListDto> _favorites;
    int _currentPage = 1;
    int _pageSize = 3;
    int _totalCount = 0;
    bool _loading = true;
    GetFavoritesInput parameter = new();
    public void Search()
    {
        Table.ReloadData();
    }
    public void Reset()
    {
        parameter.QuestionType = null;
        parameter.QuestionContent = null;
        Table.ResetData();
        Table.ReloadData();
    }
    public async Task Change(QueryModel model)
    {
        await GetListAsync(model.PageIndex, model.PageSize);
    }
    protected async Task GetListAsync(int pageIndex, int pageSize, string sorting = null)
    {
        _loading = true;
        parameter.SkipCount = (pageIndex - 1) * pageSize;
        parameter.MaxResultCount = pageSize;
        var result = await FavoriteAppService.GetListAsync(parameter);
        _favorites = result.Items;
        _totalCount = (int)result.TotalCount;
        _loading = false;
    }
    private async Task StartAsync()
    {
        await StartAsync(null);
    }
    private async Task StartAsync(Guid? id)
    {
        if (_favorites.Count == 0)
        {
            await NotificationService.Error("暂未收藏此类型的题目");
            return;
        }
        List<string> parameters = [];
        if (parameter.QuestionType.HasValue)
        {
            parameters.Add("questionType=" + parameter.QuestionType.Value);
        }
        if (id.HasValue)
        {
            parameters.Add("questionId=" + id.Value);
        }
        string url = "/my/favorite/training";
        if (parameters.Count > 0)
        {
            url += $"?{String.Join('&', parameters)}";
        }
        Navigation.NavigateTo(url);
        await Task.CompletedTask;
    }
}