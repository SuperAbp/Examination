@page "/repository/{QuestionRepositoryId:guid}/training"

<style>
    .question-content .title {
        font-size: 18px;
    }

    .question-content .title .number {
        font-weight: bold;
    }
    .question-content .chooses {
        width: 100%;
        
    }

    .bottom {
        display: flex;
        -o-justify-content: space-between;
        -webkit-justify-content: space-between;
        justify-content: space-between;
    }

    .analysis {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .chooses .choose-item {
        width: 100%;
        padding: 9px 20px 9px 5px;
        -ms-border-radius: 4px;
        border-radius: 4px;
        border: 1px solid #d9d9d9;
        margin-bottom: 10px;
    }

    .chooses .choose-item.success {
            border-color: #52c41a;
    }

        .chooses .choose-item.error {
            border-color: #ff4d4f;
        }
        

    .chooses .ant-radio {
        display: none;
    }

    .chooses .choose-item .tag {
        width: 10px;
        font-weight: bold;
        color: #1890ff;
    }

    .chooses .choose-item .content {
        color: #000;
        margin-left: 5px;
    }

    .ant-tag.current {
        color: #389e0d;
        background: #f6ffed;
        border-color: #b7eb8f;
    }

</style>
<GridRow Gutter="16">
    <GridCol Span="4">
        <Card>
            <div class="content">
                <div>
                    @for (int i = 0; i < _questions.Count; i++)
                    {
                        var tempIndex = i;
                        var color = GetNumberColor(tempIndex);
                        <Tag Color="@color" OnClick="async () => await ShowQuestion(tempIndex)">@(tempIndex + 1)</Tag>
                    }
                </div>
            </div>
        </Card>
    </GridCol>
    <GridCol Span="20">
        <Card class="question-content">
        @if (_question != null)
        {
            <h2 class="title">
                <span class="number">@(_currentIndex + 1)</span>
                <span>@_question.Content</span>
            </h2>
                <RadioGroup class="chooses" @bind-Value="selectedAnswerId" Size="large" TValue="Guid" OnChange="Validate" Disabled="selectedAnswerId != Guid.Empty">
                @for (int i = 0; i < _questionAnswers.Count; i++)
                {
                    var tempIndex = i;
                    var answer = _questionAnswers[tempIndex];
                    <Radio class="@GetBorderColor(answer)" Value="@answer.Id">
                            <span class="tag">@chooseItem[tempIndex]</span>
                            <span class="content">@_questionAnswers[tempIndex].Content</span>
                    </Radio>
                }
            </RadioGroup>
        }
        @if (showAnalysis)
        {
            <div class="analysis">
                    <Card Title="题目解析">
                    @_question.Analysis
                </Card>
            </div>
        }
        <div class="bottom">
            @if (_currentIndex <= 0)
            {
                <Button OnClick="Prev" Disabled>上一题</Button>
            }
            else
            {
                <Button OnClick="Prev">上一题</Button>
            }
            @if (_currentIndex >= _questions.Count - 1)
            {
                <Button OnClick="Next" Disabled>下一题</Button>
            }
            else
            {
                <Button OnClick="Next">下一题</Button>
            }
            
        </div>
           
        </Card>
    </GridCol>
</GridRow>

@using SuperAbp.Exam.QuestionManagement.Questions
@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using System.Diagnostics
@using Castle.Components.DictionaryAdapter
@inject IQuestionAppService QuestionAppService
@inject IQuestionAnswerAppService QuestionAnswerAppService
@code {
    [Parameter]
    public Guid QuestionRepositoryId { get; set; }

    string[] chooseItem = { "A", "B", "C", "D", "E" };
    IReadOnlyList<QuestionListDto> _questions = Array.Empty<QuestionListDto>();
    IReadOnlyList<QuestionAnswerListDto> _questionAnswers = Array.Empty<QuestionAnswerListDto>();
    List<QuestionAnswerItem> _questionAnswerItems = new();
    QuestionDetailDto _question;
    bool showAnalysis = false;
    int _currentIndex = 0;

    int _total = 0;
    Guid selectedAnswerId;
    protected override async Task OnInitializedAsync()
    {
        var result = await QuestionAppService.GetListAsync(new GetQuestionsInput() { QuestionRepositoryId = QuestionRepositoryId });
        _questions = result.Items;
        _total = (int)result.TotalCount;
        await ShowQuestion(0);
    }

    public async Task Next()
    {
        if (_currentIndex >= _questions.Count)
        {
            _currentIndex = _questions.Count - 1;
            return;

        }
        await ShowQuestion(_currentIndex + 1);
    }
    public async Task Prev()
    {
        if (_currentIndex < 0)
        {
            _currentIndex = 0;
            return;
        }
        await ShowQuestion(_currentIndex - 1);
    }
    public async Task ShowQuestion(int index)
    {
        _currentIndex = index;
        
        selectedAnswerId = default;
        showAnalysis = false;

        var id = _questions[index].Id;
        _question = await QuestionAppService.GetAsync(id);
        _questionAnswers = (await QuestionAnswerAppService.GetListAsync(id)).Items;
    }

    public string GetNumberColor(int index)
    {
        if (_currentIndex == index)
        {
            return "processing";
        }
        var tempItem = _questionAnswerItems.SingleOrDefault(item => item.QuestionIndex == index);
        if (tempItem is null)
        {
            return "default";
        }
        if (tempItem.Right)
        {
            return "success";
        }
        return "error";
    }
    public string GetBorderColor(QuestionAnswerListDto answer)
    {
        List<string> classes = new List<string>() { "choose-item" };
        if (selectedAnswerId == Guid.Empty)
        {
            return String.Join(" ", classes);
        }
        if (!showAnalysis) return String.Join(" ", classes);
        if (answer.Right)
        {
            classes.Add("success");
            return String.Join(" ", classes);
        }

        if (selectedAnswerId == answer.Id)
        {
            classes.Add("error");
            return String.Join(" ", classes);
        }
        return String.Join(" ", classes);
    }

    public void Validate(Guid id)
    {
        _questionAnswerItems.Add(new QuestionAnswerItem()
        {
            QuestionIndex = _currentIndex,
            QuestionId = _questions[_currentIndex].Id,
            AnswerId = selectedAnswerId,
            Right = _questionAnswers.First(a=>a.Id == selectedAnswerId).Right
        });
        showAnalysis = true;
    }

    public class QuestionAnswerItem
    {
        public int QuestionIndex { get; set; }
        public Guid QuestionId { get; set; }
        public Guid AnswerId { get; set; }
        public bool Right { get; set; }
    }
}
