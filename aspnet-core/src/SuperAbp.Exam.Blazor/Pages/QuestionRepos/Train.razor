@page "/repository/{QuestionRepositoryId:guid}/training/{TrainType:int?}"

<style>
    .question-content .title {
        font-size: 18px;
    }

    .question-content .title .number {
        font-weight: bold;
    }
    .question-content .chooses {
        width: 100%;
        
    }

    .bottom {
        display: flex;
        -o-justify-content: space-between;
        -webkit-justify-content: space-between;
        justify-content: space-between;
    }

    .analysis {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .chooses .choose-item {
        width: 100%;
        padding: 9px 20px 9px 5px;
        -ms-border-radius: 4px;
        border-radius: 4px;
        border: 1px solid #d9d9d9;
        margin-bottom: 10px;
    }

    .chooses .choose-item.success {
        border-color: #52c41a;
    }

    .chooses .choose-item.error {
        border-color: #ff4d4f;
    }
        

    .chooses .ant-radio {
        display: none;
    }

    .chooses .choose-item .tag {
        width: 10px;
        font-weight: bold;
        color: #1890ff;
    }

    .chooses .choose-item .content {
        color: #000;
        margin-left: 5px;
    }

    .ant-tag.current {
        color: #389e0d;
        background: #f6ffed;
        border-color: #b7eb8f;
    }

</style>
@if (loading)
{
    <div style=" text-align: center;margin: 50px 0;">
        <Spin />
    </div>
}
else
{
    <SingleSelect/>
    <GridRow Gutter="16">
        <GridCol Span="4">
            <Card>
                <div class="content">
                    <div>
                        @for (int i = 0; i < _questionIds.Count; i++)
                        {
                            var tempIndex = i;
                            var color = GetNumberColor(tempIndex);
                            <Tag Color="@color" OnClick="async () => await ShowQuestionAsync(tempIndex)">@(tempIndex + 1)</Tag>
                        }
                    </div>
                </div>
            </Card>
        </GridCol>
        <GridCol Span="20">
            <Card class="question-content">
                @if (loadingQuestion)
                {
                    <Spin />
                }
                else
                {
                    
                    @if (_question != null)
                    {
                        <h2 class="title">
                            <span class="number">@(_questionIndex + 1)</span>
                            <span>@_question.Content</span>
                        </h2>
                        <SingleSelect QuestionId="_question.Id" 
                                      Answers="_questionAnswers"
                                      SelectedQuestionAnswers="_selectedQuestionAnswers"
                                      ShowAnalysis="_showAnalysis"
                                      OnSelected="@SelectedAsync"></SingleSelect>
                    }
                    @if (_showAnalysis)
                    {
                        <div class="analysis">
                            <Card Title="题目解析">
                                @_question.Analysis
                            </Card>
                        </div>
                    }
                    <div class="bottom">
                        @if (_questionIndex <= 0)
                        {
                            <Button OnClick="PrevAsync" Disabled>上一题</Button>
                        }
                        else
                        {
                            <Button OnClick="PrevAsync">上一题</Button>
                        }
                        @if (_questionIndex >= _questionIds.Count - 1)
                        {
                            <Button OnClick="NextAsync" Disabled>下一题</Button>
                        }
                        else
                        {
                            <Button OnClick="NextAsync">下一题</Button>
                        }

                    </div>
                }
            </Card>
        </GridCol>
    </GridRow>
}

@using SuperAbp.Exam.QuestionManagement.Questions
@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using SuperAbp.Exam.TrainingManagement
@inject IQuestionAppService QuestionAppService
@inject IQuestionAnswerAppService QuestionAnswerAppService
@inject ITrainingAppService TrainingAppService
@code {
    [Parameter]
    public Guid QuestionRepositoryId { get; set; }

    [Parameter]
    public int? TrainType { get; set; }

    bool loading = true;
    bool loadingQuestion = false;
    IReadOnlyList<Guid> _questionIds = Array.Empty<Guid>();
    IReadOnlyList<QuestionAnswerListDto> _questionAnswers = Array.Empty<QuestionAnswerListDto>();
    IReadOnlyList<TrainingListDto> _trains = Array.Empty<TrainingListDto>();
    readonly Dictionary<Guid, Tuple<QuestionDetailDto, IReadOnlyList<QuestionAnswerListDto>>> _cacheQuestions = new();
    readonly List<QuestionAnswerItem> _selectedQuestionAnswers = new();
    QuestionDetailDto _question;
    bool _showAnalysis = false;
    int _questionIndex = 0;
    protected override async Task OnInitializedAsync()
    {
        var result = await QuestionAppService.GetIdsAsync(new GetQuestionsInput() { QuestionRepositoryId = QuestionRepositoryId });
        _questionIds = result.Items;

        int maxIndex = 0;
        if (TrainType is null or 0)
        {
            var trainResult = await TrainingAppService.GetListAsync(new GetTrainsInput() { QuestionRepositoryId = QuestionRepositoryId });
            _trains = trainResult.Items;

            maxIndex = _trains.Count > 0 
                ? _trains.Max(t => _questionIds.ToList().IndexOf(t.QuestionId))
                : 0;
        }
        await ShowQuestionAsync(maxIndex);
        loading = false;
    }

    public async Task NextAsync()
    {
        if (_questionIndex >= _questionIds.Count)
        {
            _questionIndex = _questionIds.Count - 1;
            return;

        }

        await ShowQuestionAsync(_questionIndex + 1);
    }
    public async Task PrevAsync()
    {
        if (_questionIndex < 0)
        {
            _questionIndex = 0;
            return;
        }
        await ShowQuestionAsync(_questionIndex - 1);
    }
    public async Task ShowQuestionAsync(int index)
    {
        loadingQuestion = true;
        _questionIndex = index;
        _showAnalysis = false;
        
        var id = _questionIds[index];
        await LoadQuestionAsync(id);
        if (TrainType is 1 || _selectedQuestionAnswers.Any(a => a.QuestionId == id))
        {
            _showAnalysis = true;
        }
    
        loadingQuestion = false;
    }

    private async Task LoadQuestionAsync(Guid id)
    {
        if (_cacheQuestions.ContainsKey(id))
        {
            _question = _cacheQuestions[id].Item1;
            _questionAnswers = _cacheQuestions[id].Item2;
        }
        else
        {
            _question = await QuestionAppService.GetAsync(id);
            _questionAnswers = (await QuestionAnswerAppService.GetListAsync(id)).Items;
            _cacheQuestions.Add(id, new Tuple<QuestionDetailDto, IReadOnlyList<QuestionAnswerListDto>>(_question, _questionAnswers));
        }
    }

    public string GetNumberColor(int index)
    {
        if (_questionIndex == index)
        {
            return "processing";
        }
        var id = _questionIds[index];
        var selectedQuestionAnswer = _selectedQuestionAnswers.Find(a => a.QuestionId == id);
        if (selectedQuestionAnswer is not null)
        {
            return GetColor(selectedQuestionAnswer.Right);
        }
        var training = _trains.SingleOrDefault(t => t.QuestionId == id);
        return training is not null 
            ? GetColor(training.Right) 
            : "default";
    }

    private string GetColor(bool right)
    {
        return right ? "success" : "error";
    }

    public async Task SelectedAsync(QuestionAnswerItem item)
    {
        _showAnalysis = true;
        var right = item.Right;
        var training = _trains.SingleOrDefault(t => t.QuestionId == item.QuestionId);
        if (training is null)
        {
            await TrainingAppService.CreateAsync(new TrainingCreateDto()
            {
                QuestionRepositoryId = QuestionRepositoryId,
                    QuestionId = item.QuestionId,
                Right = right
            });
        }
        else
        {
            await TrainingAppService.SetIsRightAsync(training.Id, right);
        }
        _selectedQuestionAnswers.Add(item);
    }

    public class QuestionAnswerItem
    {
        public Guid QuestionId { get; set; }
        public string AnswerId { get; set; }
        public bool Right { get; set; }
    }
}
