@page "/exam/start/{id:guid}"

<style>
    .question-content .title {
    font-size: 18px;
    }

    .question-content .title .number {
    font-weight: bold;
    }

    .question-content .chooses {
    width: 100%;
    }

    .chooses .choose-item {
    width: 100%;
    padding: 9px 20px 9px 5px;
    -ms-border-radius: 4px;
    border-radius: 4px;
    border: 1px solid #d9d9d9;
    margin-bottom: 10px;
    }

    .chooses .ant-radio {
    display: none;
    }

    .ant-radio-wrapper-checked {
    border: 1px solid #409eff !important;
    }

    .chooses .choose-item .tag {
    width: 10px;
    font-weight: bold;
    color: #1890ff;
    }

    .chooses .choose-item .content {
    color: #000;
    margin-left: 5px;
    }
</style>
@if (loading)
{
    <div style=" text-align: center;margin: 50px 0;">
        <Spin />
    </div>
}
else
{
    <GridRow Gutter="16">
        <GridCol Span="4">
            <Affix OffsetTop="10">
                <QuestionNumber CurrentId="_questions[0].Questions[0].QuestionId"
                Numbers="_questions"></QuestionNumber>
            </Affix>
        </GridCol>
        <GridCol Span="16">
            <Card class="question-content">
                <ChildContent>
                    @if (loadingQuestion)
                    {
                        <Spin />
                    }
                    else
                    {
                        var questionTypes = _examQuestions.GroupBy(q => q.QuestionType).Select(q => new
                        {
                            QuestionType = q.Key,
                            Count = q.Count()
                        }).ToArray();
                        int number = 1;
                        for (int i = 0; i < questionTypes.Length; i++)
                        {
                            var questionType = questionTypes[i];

                            var currentQuestions = _examQuestions.Where(q => q.QuestionType == questionType.QuestionType).ToArray();
                            <h2>@chineseNumber[i]、@L["QuestionType:" + questionType.QuestionType]题（共@(questionType.Count)题，合计@(currentQuestions.Sum(q => q.QuestionScore))分）</h2>
                            foreach (UserExamDetailDto.QuestionDto examQuestion in currentQuestions)
                            {
                                IReadOnlyList<QuestionAnswerViewModel> answers = ToQuestionAnswerViewModels(examQuestion.Options);
                                <h3 class="title">
                                    <span class="number">@(number++)</span>
                                    <span>@examQuestion.Content</span>
                                </h3>
                                @switch (QuestionType.FromValue(examQuestion.QuestionType).Name)
                                {
                                    case nameof(QuestionType.SingleSelect):
                                    case nameof(QuestionType.Judge):
                                        <SingleSelect QuestionId="examQuestion.Id"
                                        Answered="@examQuestion.Answers"
                                        Answers="answers"
                                        OnSubmit="@SubmitAsync"></SingleSelect>
                                        break;
                                    case nameof(QuestionType.MultiSelect):
                                        <MultiSelect QuestionId="examQuestion.Id"
                                        Answered="@examQuestion.Answers"
                                        Answers="answers"
                                        ShowAnalysis="false"
                                        OnSelect="@SelectAsync"></MultiSelect>
                                        break;
                                    case nameof(QuestionType.FillInTheBlanks):
                                        <Blank QuestionId="examQuestion.Id"
                                        Answered="@examQuestion.Answers"
                                        Answers="answers"
                                        ShowAnalysis="false"
                                        ShowConfirm="false"
                                        OnSubmit="@SubmitAsync"></Blank>
                                        break;
                                }
                            }
                        }
                    }
                </ChildContent>
            </Card>
        </GridCol>
        <GridCol Span="4">
            <Affix OffsetTop="10">
                <Card style="text-align: center;">
                    <ChildContent>
                        <Button AutoLoading Type="@ButtonType.Primary" OnClick="SubmitPaperAsync" style="width:100%">提交试卷</Button>
                    </ChildContent>
                </Card>
            </Affix>
        </GridCol>
    </GridRow>
}

@using SuperAbp.Exam.ExamManagement.UserExams
@using SuperAbp.Exam.QuestionManagement.Questions
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Localization
@using Microsoft.Extensions.Localization
@inject NavigationManager Navigation
@inject IStringLocalizer<ExamResource> L
@inject IUserExamAppService UserExamAppService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@code {
    [Parameter]
    public Guid Id { get; set; }

    bool loading = true;
    bool loadingQuestion = false;
    string[] chineseNumber = ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];

    IReadOnlyList<UserExamDetailDto.QuestionDto> _examQuestions = Array.Empty<UserExamDetailDto.QuestionDto>();
    Dictionary<int, int> _questionTypes = new();
    List<QuestionNumberVo> _questions = [];
    private string _questionAnswerStorageKey;

    protected override async Task OnInitializedAsync()
    {
        _questionAnswerStorageKey = $"question_answers_{Id}";
        var userExam = await UserExamAppService.GetAsync(Id);
        _examQuestions = userExam.Questions;
        List<QuestionAnswerItem> answerItems = await localStorage.GetItemAsync<List<QuestionAnswerItem>>(_questionAnswerStorageKey) ?? [];
        if (answerItems.Count > 0)
        {
            foreach (var item in answerItems)
            {
                var question = _examQuestions.SingleOrDefault(q => q.Id == item.QuestionId);
                if (question is null)
                {
                    continue;
                }
                question.Answers = item.Answer;
            }
        }

        _questionTypes = _examQuestions.GroupBy(q => q.QuestionType).Select(q => new
        {
            QuestionType = q.Key,
            Count = q.Count()
        }).ToDictionary(key => key.QuestionType, value => value.Count);
        foreach (KeyValuePair<int, int> item in _questionTypes)
        {
            QuestionNumberVo vo = new QuestionNumberVo()
            {
                QuestionType = item.Key,
                    Questions = _examQuestions.Where(q => q.QuestionType == item.Key)
                    .Select(q => new QuestionNumberVo.QuestionIndex()
                    {
                        QuestionId = q.Id,
                        QuestionScore = q.QuestionScore
                    }).ToArray()
            };
            vo.TotalScore = vo.Questions.Sum(q => q.QuestionScore ?? 0);
            _questions.Add(vo);
        }
        loading = false;
    }
    protected IReadOnlyList<QuestionAnswerViewModel> ToQuestionAnswerViewModels(IEnumerable<UserExamDetailDto.QuestionDto.OptionDto> answers)
    {
        return answers
            .Select(qa => new QuestionAnswerViewModel
            {
                Id = qa.Id,
                Content = qa.Content,
                Right = false
            }).ToArray();
    }
    public virtual async Task SubmitAsync(QuestionAnswerItem item)
    {
        List<QuestionAnswerItem> answerItems = await localStorage.GetItemAsync<List<QuestionAnswerItem>>(_questionAnswerStorageKey)??[];
        answerItems = answerItems.Where(x => x.QuestionId != item.QuestionId).ToList();
        answerItems.Add(item);
        await localStorage.SetItemAsync(_questionAnswerStorageKey, answerItems);
    }

    public virtual async Task SubmitPaperAsync()
    {
        List<QuestionAnswerItem> answerItems = await localStorage.GetItemAsync<List<QuestionAnswerItem>>(_questionAnswerStorageKey) ?? [];
        await UserExamAppService.FinishedAsync(Id, answerItems.Select(a => new UserExamAnswerDto
        {
            QuestionId = a.QuestionId,
            Answers = a.Answer
        }).ToList());
        await localStorage.RemoveItemAsync(_questionAnswerStorageKey);
        Navigation.NavigateTo("/exam/result");
    }

    public virtual async Task SelectAsync(QuestionAnswerSelectEventArgs item)
    {
        await Answer(item.QuestionId, item.Answer);
    }

    /// <summary>
    /// 答题
    /// </summary>
    /// <param name="questionId">题目Id</param>
    /// <param name="answer">答案</param>
    /// <returns></returns>
    protected async Task Answer(Guid questionId, string answer)
    {
        await UserExamAppService.AnswerAsync(Id, new UserExamAnswerDto()
            {
                QuestionId = questionId,
                Answers = answer
            });
    }
    protected virtual void GoDetail()
    {
        Navigation.NavigateTo($"/exam");
    }
}
