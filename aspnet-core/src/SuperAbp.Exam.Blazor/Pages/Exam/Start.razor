@page "/exam/start/{id:guid}"
@using SuperAbp.Exam.ExamManagement.UserExams
@using SuperAbp.Exam.ExamManagement.UserExamQuestions
@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using SuperAbp.Exam.QuestionManagement.Questions
@using SuperAbp.Exam.TrainingManagement
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Localization
@using Volo.Abp.AspNetCore.Components.Notifications
@using Microsoft.Extensions.Localization
@using SuperAbp.Exam.ExamManagement.Exams

<style>
    .question-content .title {
        font-size: 18px;
    }

        .question-content .title .number {
            font-weight: bold;
        }
    .question-content .chooses {
        width: 100%;
        
    }

    .chooses .choose-item {
        width: 100%;
        padding: 9px 20px 9px 5px;
        -ms-border-radius: 4px;
        border-radius: 4px;
        border: 1px solid #d9d9d9;
        margin-bottom: 10px;
    }

    .chooses .ant-radio {
        display: none;
    }

    .ant-radio-wrapper-checked {
        border: 1px solid #409eff !important;
    }

    .chooses .choose-item .tag {
        width: 10px;
        font-weight: bold;
        color: #1890ff;
    }

    .chooses .choose-item .content {
        color: #000;
        margin-left: 5px;
    }
</style>
@if (loading)
{
    <div style=" text-align: center;margin: 50px 0;">
        <Spin />
    </div>
}
else
{

    <GridRow Gutter="16">
        <GridCol Span="4">
            @*<QuestionNumber CurrentId="_questionIds[_questionIndex]"
                            Ids="_questionIds"></QuestionNumber>*@
        </GridCol>
        <GridCol Span="16">
            <Card class="question-content">
                <Body>
                @if (loadingQuestion)
                {
                    <Spin/>
                }
                else
                {
                    var questionTypes = _examQuestions.GroupBy(q => q.QuestionType).Select(q => new
                    {
                        QuestionType = q.Key,
                        Count = q.Count()
                    });
                    foreach (var questionType in questionTypes)
                    {                            
                        var currentQuestions = _examQuestions.Where(q => q.QuestionType == questionType.QuestionType).ToArray();
                            <h2>@L["QuestionType:"+questionType.QuestionType]题（共@(questionType.Count)题，合计@(currentQuestions.Sum(q=>q.QuestionScore))分）</h2>
                        for (int i = 1; i <= currentQuestions.Length; i++)
                        {
                                var examQuestion = _examQuestions[i - 1];
                                <h2 class="title">
                                    <span class="number">@i</span>
                                    <span>【@L["QuestionType:"+examQuestion.QuestionType]】@examQuestion.Question</span>
                                </h2>
                                @switch (examQuestion.QuestionType)
                                {
                                    case QuestionType.SingleSelect:
                                    case QuestionType.Judge:
                                        <SingleSelect QuestionId="examQuestion.QuestionId"
                                                      Answered="@examQuestion.Answers"
                                                      Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                                      OnSubmit="@SubmitAsync"></SingleSelect>
                                        break;
                                    case QuestionType.MultiSelect:
                                        <MultiSelect QuestionId="examQuestion.QuestionId"
                                                     Answered="@examQuestion.Answers"
                                                     Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                                     ShowAnalysis="false"
                                                     OnSelect="@SelectAsync"></MultiSelect>
                                        break;
                                    case QuestionType.FillInTheBlanks:
                                        <Blank QuestionId="examQuestion.QuestionId"
                                               Answered="@examQuestion.Answers"
                                               Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                               ShowAnalysis="false"
                                               OnSubmit="@SubmitAsync"></Blank>
                                        break;
                                }
                        }
                    }
                   @* for (int i = 1; i <= _examQuestions.Count; i++)
                    {
                        var examQuestion = _examQuestions[i - 1];
                            <h2 class="title">
                                <span class="number">@i</span>
                                <span>【@L["QuestionType:"+examQuestion.QuestionType]】@examQuestion.Question</span>
                            </h2>
                            @switch (examQuestion.QuestionType)
                            {
                                case QuestionType.SingleSelect:
                                case QuestionType.Judge:
                                    <SingleSelect QuestionId="examQuestion.QuestionId"
                                                  Answered="@examQuestion.Answers"
                                                  Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                                  OnSubmit="@SubmitAsync"></SingleSelect>
                                    break;
                                case QuestionType.MultiSelect:
                                    <MultiSelect QuestionId="examQuestion.QuestionId"
                                                 Answered="@examQuestion.Answers"
                                                 Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                                 ShowAnalysis="false"
                                                 OnSelect="@SelectAsync"></MultiSelect>
                                    break;
                                case QuestionType.FillInTheBlanks:
                                    <Blank QuestionId="examQuestion.QuestionId"
                                           Answered="@examQuestion.Answers"
                                           Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                           ShowAnalysis="false"
                                           OnSubmit="@SubmitAsync"></Blank>
                                    break;
                            }
                    }*@
                }
                </Body>
            </Card>
        </GridCol>
        <GridCol Span="4">
            <div style="background-color: #fff">3</div>
        </GridCol>
    </GridRow>
}
@inject NavigationManager Navigation
@inject IStringLocalizer<ExamResource> L
@inject IUiNotificationService UiNotificationService
@inject IUserExamAppService UserExamAppService
@inject IExaminationAppService ExaminationAppService
@inject IUserExamQuestionAppService UserExamQuestionAppService
@code {
    [Parameter]
    public Guid Id { get; set; }

    bool loading = true;
    bool loadingQuestion = false;

    ExamDetailDto _exam;
    IReadOnlyList<UserExamQuestionListDto> _examQuestions = Array.Empty<UserExamQuestionListDto>();
    IReadOnlyList<Guid> _questionIds = Array.Empty<Guid>();

    protected override async Task OnInitializedAsync()
    {
        var userExam = await UserExamAppService.GetAsync(Id);
        _exam = await ExaminationAppService.GetAsync(userExam.ExamId);
        var dto = await UserExamQuestionAppService.GetListAsync(new GetUserExamQuestionsInput() { UserExamId = Id });
        _examQuestions = dto.Items;
        _questionIds = dto.Items.Select(q=>q.QuestionId).ToArray();
        loading = false;
    }
    protected IReadOnlyList<QuestionAnswerViewModel> ToQuestionAnswerViewModels(IEnumerable<UserExamQuestionListDto.QuestionAnswerListDto> answers)
    {
        return answers
            .Select(qa => new QuestionAnswerViewModel
            {
                Id = qa.Id,
                Content = qa.Content,
                Right = false
            }).ToArray();
    }
    public virtual async Task SubmitAsync(QuestionAnswerItem item)
    {
        await AnswerAnswer(item.QuestionId, item.Answer);
    }

    public virtual async Task SelectAsync(QuestionAnswerSelectEventArgs item)
    {
        await AnswerAnswer(item.QuestionId, item.Answer);
    }

    /// <summary>
    /// 答题
    /// </summary>
    /// <param name="questionId">题目Id</param>
    /// <param name="answer">答案</param>
    /// <returns></returns>
    protected async Task AnswerAnswer(Guid questionId, string answer)
    {
        var examQuestionId = _examQuestions.First(q => q.QuestionId == questionId).Id;

        await UserExamQuestionAppService.AnswerAsync(examQuestionId, new UserExamQuestionAnswerDto()
        {
            Answers = answer
        });
    }
    protected virtual void GoDetail()
    {
        Navigation.NavigateTo($"/exam");
    }
}
