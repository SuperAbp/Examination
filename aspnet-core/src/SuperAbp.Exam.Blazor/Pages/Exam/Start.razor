@page "/exam/start/{id:guid}"
@using SuperAbp.Exam.ExamManagement.UserExams
@using SuperAbp.Exam.ExamManagement.UserExamQuestions
@using SuperAbp.Exam.QuestionManagement.Questions
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Localization
@using Volo.Abp.AspNetCore.Components.Notifications
@using Microsoft.Extensions.Localization
@using SuperAbp.Exam.ExamManagement.Exams
@using Volo.Abp.Application.Dtos

<style>
    .question-content .title {
    font-size: 18px;
    }

    .question-content .title .number {
    font-weight: bold;
    }

    .question-content .chooses {
    width: 100%;
    }

    .chooses .choose-item {
    width: 100%;
    padding: 9px 20px 9px 5px;
    -ms-border-radius: 4px;
    border-radius: 4px;
    border: 1px solid #d9d9d9;
    margin-bottom: 10px;
    }

    .chooses .ant-radio {
    display: none;
    }

    .ant-radio-wrapper-checked {
    border: 1px solid #409eff !important;
    }

    .chooses .choose-item .tag {
    width: 10px;
    font-weight: bold;
    color: #1890ff;
    }

    .chooses .choose-item .content {
    color: #000;
    margin-left: 5px;
    }
</style>
@if (loading)
{
    <div style=" text-align: center;margin: 50px 0;">
        <Spin />
    </div>
}
else
{
    <GridRow Gutter="16">
        <GridCol Span="4">
            <Affix OffsetTop="10">
                <QuestionNumber CurrentId="_questions[0].Questions[0].QuestionId"
                Numbers="_questions"></QuestionNumber>
            </Affix>
        </GridCol>
        <GridCol Span="16">
            <Card class="question-content">
                <ChildContent>
                    @if (loadingQuestion)
                    {
                        <Spin />
                    }
                    else
                    {
                        var questionTypes = _examQuestions.GroupBy(q => q.QuestionType).Select(q => new
                        {
                            QuestionType = q.Key,
                            Count = q.Count()
                        }).ToArray();
                        int number = 1;
                        for (int i = 0; i < questionTypes.Length; i++)
                        {
                            var questionType = questionTypes[i];

                            var currentQuestions = _examQuestions.Where(q => q.QuestionType == questionType.QuestionType).ToArray();
                            <h2>@chineseNumber[i]、@L["QuestionType:" + questionType.QuestionType]题（共@(questionType.Count)题，合计@(currentQuestions.Sum(q => q.QuestionScore))分）</h2>
                            foreach (UserExamQuestionListDto examQuestion in currentQuestions)
                            {
                                <h3 class="title">
                                    <span class="number">@(number++)</span>
                                    <span>@examQuestion.Question</span>
                                </h3>
                                @switch (QuestionType.FromValue(examQuestion.QuestionType).Name)
                                {
                                    case nameof(QuestionType.SingleSelect):
                                    case nameof(QuestionType.Judge):
                                        <SingleSelect QuestionId="examQuestion.QuestionId"
                                        Answered="@examQuestion.Answers"
                                        Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                        OnSubmit="@SubmitAsync"></SingleSelect>
                                        break;
                                    case nameof(QuestionType.MultiSelect):
                                        <MultiSelect QuestionId="examQuestion.QuestionId"
                                        Answered="@examQuestion.Answers"
                                        Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                        ShowAnalysis="false"
                                        OnSelect="@SelectAsync"></MultiSelect>
                                        break;
                                    case nameof(QuestionType.FillInTheBlanks):
                                        <Blank QuestionId="examQuestion.QuestionId"
                                        Answered="@examQuestion.Answers"
                                        Answers="ToQuestionAnswerViewModels(examQuestion.QuestionAnswers)"
                                        ShowAnalysis="false"
                                        ShowConfirm="false"
                                        OnSubmit="@SubmitAsync"></Blank>
                                        break;
                                }
                            }
                        }
                    }
                </ChildContent>
            </Card>
        </GridCol>
        <GridCol Span="4">
            <Affix OffsetTop="10">
                <Card style="text-align: center;">
                    <ChildContent>
                        <Button AutoLoading Type="@ButtonType.Primary" OnClick="SubmitPaperAsync" style="width:100%">提交试卷</Button>
                    </ChildContent>
                </Card>
            </Affix>
        </GridCol>
    </GridRow>
}
@inject NavigationManager Navigation
@inject IStringLocalizer<ExamResource> L
@inject IUiNotificationService UiNotificationService
@inject IUserExamAppService UserExamAppService
@inject IExaminationAppService ExaminationAppService
@inject IUserExamQuestionAppService UserExamQuestionAppService
@code {
    [Parameter]
    public Guid Id { get; set; }

    bool loading = true;
    bool loadingQuestion = false;
    string[] chineseNumber = ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];

    ExamDetailDto _exam;
    IReadOnlyList<UserExamQuestionListDto> _examQuestions = Array.Empty<UserExamQuestionListDto>();
    List<QuestionNumberVo> _questions =[];

    protected override async Task OnInitializedAsync()
    {
        var userExam = await UserExamAppService.GetAsync(Id);
        _exam = await ExaminationAppService.GetAsync(userExam.ExamId);
        PagedResultDto<UserExamQuestionListDto> dto = await UserExamQuestionAppService.GetListAsync(new GetUserExamQuestionsInput() { UserExamId = Id });
        _examQuestions = dto.Items;

        foreach (QuestionType type in dto.Items
                     .GroupBy(q=>q.QuestionType).Select(q=>q.Key).Distinct())
        {
            QuestionNumberVo vo = new QuestionNumberVo()
            {
                QuestionType = type,
                Questions = dto.Items.Where(q => q.QuestionType == type)
                    .Select(q=>new QuestionNumberVo.QuestionIndex()
                    {
                        QuestionId = q.QuestionId,
                        QuestionScore = q.QuestionScore
                    }).ToArray()
            };
            vo.TotalScore = vo.Questions.Sum(q => q.QuestionScore ?? 0);
            _questions.Add(vo);
        }
        loading = false;
    }
    protected IReadOnlyList<QuestionAnswerViewModel> ToQuestionAnswerViewModels(IEnumerable<UserExamQuestionListDto.QuestionAnswerListDto> answers)
    {
        return answers
            .Select(qa => new QuestionAnswerViewModel
                {
                    Id = qa.Id,
                    Content = qa.Content,
                    Right = false
                }).ToArray();
    }
    public virtual async Task SubmitAsync(QuestionAnswerItem item)
    {
        await Answer(item.QuestionId, item.Answer);
    }

    public virtual async Task SubmitPaperAsync()
    {
        await UserExamAppService.FinishedAsync(Id);
        Navigation.NavigateTo("/exam/result");
    }

    public virtual async Task SelectAsync(QuestionAnswerSelectEventArgs item)
    {
        await Answer(item.QuestionId, item.Answer);
    }

    /// <summary>
    /// 答题
    /// </summary>
    /// <param name="questionId">题目Id</param>
    /// <param name="answer">答案</param>
    /// <returns></returns>
    protected async Task Answer(Guid questionId, string answer)
    {
        var examQuestionId = _examQuestions.First(q => q.QuestionId == questionId).Id;

        await UserExamQuestionAppService.AnswerAsync(examQuestionId, new UserExamQuestionAnswerDto()
            {
                Answers = answer
            });
    }
    protected virtual void GoDetail()
    {
        Navigation.NavigateTo($"/exam");
    }
}
