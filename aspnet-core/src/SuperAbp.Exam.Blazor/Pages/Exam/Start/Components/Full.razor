@{
    var questionTypes = Questions.GroupBy(q => q.QuestionType).Select(q => new
    {
        QuestionType = q.Key,
        Count = q.Count()
    }).ToArray();
    int number = 1, bigNumber = 0;
    foreach (var questionType in questionTypes)
    {

        var currentQuestions = Questions.Where(q => q.QuestionType == questionType.QuestionType).ToArray();
        <Title Level="2">@_chineseNumber[bigNumber++]、@L["QuestionType:" + questionType.QuestionType]题（共@(questionType.Count)题，合计@(currentQuestions.Sum(q => q.QuestionScore))分）</Title>
        foreach (UserExamDetailDto.QuestionDto examQuestion in currentQuestions)
        {
            IReadOnlyList<QuestionAnswerViewModel> answers = ToQuestionAnswerViewModels(examQuestion.Options);
            @* <Title Level="3" class="title" id="@($"question-{examQuestion.Id}")"> *@
            @*     <span class="number">@(number++)</span> *@
            @*     <span>@examQuestion.Content</span> *@
            @* </Title> *@
            <h3 class="title" id="question-@examQuestion.Id">
                <span class="number">@(number++)、</span><span>@examQuestion.Content</span>
            </h3>
            @switch (QuestionType.FromValue(examQuestion.QuestionType).Name)
            {
                case nameof(QuestionType.SingleSelect):
                case nameof(QuestionType.Judge):
                    <SingleSelect QuestionId="examQuestion.Id"
                                  Answered="@examQuestion.Answers"
                                  Answers="answers"
                                  OnSubmit="@SubmitAsync"></SingleSelect>
                    break;
                case nameof(QuestionType.MultiSelect):
                    <MultiSelect QuestionId="examQuestion.Id"
                                 Answered="@examQuestion.Answers"
                                 Answers="answers"
                                 ShowAnalysis="false"
                                 OnSubmit="@SubmitAsync"></MultiSelect>
                    break;
                case nameof(QuestionType.FillInTheBlanks):
                    <Blank QuestionId="examQuestion.Id"
                           Answered="@examQuestion.Answers"
                           Answers="answers"
                           ShowAnalysis="false"
                           ShowConfirm="false"
                           OnSubmit="@SubmitAsync"></Blank>
                    break;
            }
        }
    }
}

@using Microsoft.Extensions.Localization
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.ExamManagement.UserExams
@using SuperAbp.Exam.Localization
@using SuperAbp.Exam.QuestionManagement.Questions
@inherits ExamQuestionBase
@inject IUserExamAppService UserExamAppService
@inject IStringLocalizer<ExamResource> L
@inject IJSRuntime JSRuntime
@code {
    [Parameter]
    public Guid UserExamId { get; set; }
    [Parameter]
    public IReadOnlyList<UserExamDetailDto.QuestionDto> Questions { get; set; }

    readonly string[] _chineseNumber = ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];

    public async Task SubmitAsync(QuestionAnswerItem item)
    {
        var question = Questions.FirstOrDefault(q => q.Id == item.QuestionId);
        if (question != null)
        {
            question.Answers = item.Answer;
        }
        await SaveAnswerAsync(item);
    }

    protected IReadOnlyList<QuestionAnswerViewModel> ToQuestionAnswerViewModels(IEnumerable<UserExamDetailDto.QuestionDto.OptionDto> answers)
    {
        return answers
            .Select(qa => new QuestionAnswerViewModel
            {
                Id = qa.Id,
                Content = qa.Content,
                Right = false
            }).ToArray();
    }

    public async Task ShowQuestionAsync(Guid id)
    {
        string elementId = $"question-{id}";
        await JSRuntime.InvokeVoidAsync("scrollToElementById", elementId);
    }
}