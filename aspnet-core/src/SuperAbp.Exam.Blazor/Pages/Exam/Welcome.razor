@page "/exam/welcome/{id:guid}"
@if (_loading)
{
    <div style=" text-align: center;margin: 50px 0;">
        <Spin />
    </div>
}
else
{
    <Card>
        <h3 style="text-align: center;">@L["ExamInstructions"]</h3>
        <div style="height: 500px;overflow-y: scroll;margin: 20px;border-top: 1px dashed #ddd;border-bottom: 1px dashed #ddd;">
            @if (!String.IsNullOrWhiteSpace(_exam.Description))
            {
                @(new MarkupString(_exam.Description))
            }
        </div>
        <Progress Percent="@_progress" ShowInfo="false"></Progress>
        <Button Type="ButtonType.Primary" Disabled="_btnLoading" OnClick="async () => await StartAsync()">@L["StartExam"]</Button>
    </Card>
}
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using SuperAbp.Exam.ExamManagement.Exams
@using SuperAbp.Exam.ExamManagement.UserExams
@inherits ExamComponentBase
@inject NavigationManager Navigation
@inject IUserExamAppService UserExamAppService
@inject IExaminationAppService ExamAppService
@inject IConfirmService ConfirmService

@code {
    [Inject]
    public IAccessTokenProvider AccessTokenProvider { get; set; } = default!;

    [Inject]
    public IConfiguration Configuration { get; set; } = default!;

    [Parameter]
    public Guid Id { get; set; }

    public HubConnection HubConnection { get; set; } = default!;
    private ExamDetailDto _exam;
    private int _progress = 0;
    private bool _btnLoading = false;
    private bool _loading = true;


    protected override async Task OnInitializedAsync()
    {
        _exam = await ExamAppService.GetAsync(Id);
        _loading = false;
    }

    private async Task StartAsync()
    {
        UserExamDetailDto unfinishedUserExam = await UserExamAppService.GetUnfinishedAsync();
        if (unfinishedUserExam is not null)
        {
            if (unfinishedUserExam.Status == UserExamStatus.InProgress.Value)
            {
                var content = "存在未完成的考试，点击确认进入";
                var title = ConfirmIcon.Warning.ToString();
                var confirmResult = await ConfirmService.Show(content, title, ConfirmButtons.OK, ConfirmIcon.Warning);
                Navigation.NavigateTo($"/exam/start/{unfinishedUserExam.Id}");
                return;
            }
            if (unfinishedUserExam.Status == UserExamStatus.Waiting.Value)
            {
                Navigation.NavigateTo("/exam/");
            }
        }

        _btnLoading = true;
        UserExamListDto dto = await UserExamAppService.CreateAsync(new UserExamCreateDto() { ExamId = Id });

        (await AccessTokenProvider.RequestAccessToken()).TryGetToken(out var accessToken);
        string signalRUrl = Configuration["SignalRUrl"] ?? "";
        HubConnection = new HubConnectionBuilder()
            .WithUrl(signalRUrl.EnsureEndsWith('/') + "signalr-hubs/progress", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(accessToken!.Value);
            })
            .Build();

        HubConnection.On<int>("ReceiveProgress", async message =>
        {
            _progress = message;
            if (_progress >= 100)
            {
                await HubConnection.StopAsync();
                Navigation.NavigateTo($"/exam/start/{dto.Id}");
            }
            await InvokeAsync(StateHasChanged);
        });

        await HubConnection.StartAsync();
    }
}
