﻿

<style>
    .multi-chooses .disabled {
        cursor: not-allowed;
    }

    .multi-chooses .choose-item {
        padding: 9px 20px 9px 5px;
        -ms-border-radius: 4px;
        border-radius: 4px;
        border: 1px solid #d9d9d9;
        margin-bottom: 10px;
    }

    .multi-chooses .tag {
        width: 10px;
        font-weight: bold;
        color: #1890ff;
    }

    .multi-chooses .choose-item.primary {
        border-color: #1890ff;
    }

    .multi-chooses .choose-item .body {
        padding: 0 8px;
        display: flex;
        -o-justify-content: space-between;
        -webkit-justify-content: space-between;
        justify-content: space-between;
    }

    .multi-chooses .choose-item .content {
        color: #000;
        margin-left: 5px;
    }

    .multi-chooses .choose-item .result {
        display: none;
    }

        .multi-chooses .choose-item .result.show {
            display: block;
        }

        .multi-chooses .choose-item .result span {
            vert-align: middle;
            font-size: 1rem;
        }
</style>

<div class="multi-chooses">
    @for (int i = 0; i < Answers.Count; i++)
    {
        var tempIndex = i;
        var answer = Answers[tempIndex];
        <div class="@GetBorderColor(answer)" @onclick="async () => await SelectAnswerAsync(answer)">
            <div class="body">
                <div>
                    <span class="tag">@Convert.ToChar(65 + tempIndex)</span>
                    <span class="content">@answer.Content</span>
                </div>
                @if (answer.Right)
                {
                    <div class="@GetResultClass(answer)">
                        <Icon Type="check-circle" Theme="IconThemeType.TwoTone" TwotoneColor="#52c41a" />
                    </div>
                }
            </div>
        </div>
    }
</div>
@if (!ShowAnalysis)
{
    if (OnSubmit.HasDelegate)
    {
        <Button Type="@ButtonType.Primary" Size="@ButtonSize.Small" OnClick="ValidateAsync">确认答案</Button>
    }
}

@using JetBrains.Annotations
@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Blazor.Pages
@using Volo.Abp.AspNetCore.Components.Notifications
@inject IUiNotificationService UiNotificationService
@code {
    [Parameter]
    public Guid QuestionId { get; set; }
    [Parameter]
    public IReadOnlyList<QuestionAnswerViewModel> Answers { get; set; }
    [Parameter]
    public bool ShowAnalysis { get; set; }
    [Parameter] [CanBeNull] public string Answered { get; set; }
    [Parameter]
    public EventCallback<QuestionAnswerSelectEventArgs> OnSelect { get; set; }
    [Parameter]
    public EventCallback<QuestionAnswerItem> OnSubmit { get; set; }


    List<Guid> _selectedAnswerIds = new List<Guid>();
    protected override void OnInitialized()
    {
        if (!Answered.IsNullOrWhiteSpace())
        {
            _selectedAnswerIds = Answered.Split(ExamConsts.Splitter).Select(v => new Guid(v)).ToList();
        }
    }

    public string GetBorderColor(QuestionAnswerViewModel answer)
    {
        List<string> classes = new List<string>() { "choose-item" };
        if (_selectedAnswerIds.Contains(answer.Id))
        {
            classes.Add("primary");
        }
        if (ShowAnalysis)
        {
            classes.Add("disabled");
        }
        return String.Join(" ", classes);
    }
    string GetResultClass(QuestionAnswerViewModel answer)
    {
        List<string> classes = ["result"];
        if (ShowAnalysis && answer.Right)
        {
            classes.Add("show");
        }
        return String.Join(" ", classes);
    }

    async Task SelectAnswerAsync(QuestionAnswerViewModel answer)
    {
        if (ShowAnalysis)
        {
            return;
        }
        if (_selectedAnswerIds.Contains(answer.Id))
        {
            _selectedAnswerIds.Remove(answer.Id);
        }
        else
        {
            _selectedAnswerIds.Add(answer.Id);
        }
        if (OnSelect.HasDelegate)
        {
            await OnSelect.InvokeAsync(new QuestionAnswerSelectEventArgs()
                {
                    QuestionId = QuestionId,
                    Answer = String.Join(ExamConsts.Splitter, _selectedAnswerIds),
                });
        }
    }
    void OnChange(string[] checkedValues)
    {
        _selectedAnswerIds = checkedValues.Select(v => new Guid(v)).ToList();
    }
    async Task ValidateAsync()
    {
        if (_selectedAnswerIds.Count <= 0)
        {
            await UiNotificationService.Error("请先选择答案");
            return;
        }
        var rightIds = Answers
            .Where(a => a.Right)
            .Select(a => a.Id)
            .ToArray();
        bool right = _selectedAnswerIds.Count == rightIds.Length
                     && _selectedAnswerIds.Except(rightIds).ToArray().Length == 0;

        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(new QuestionAnswerItem()
                {
                    QuestionId = QuestionId,
                    Answer = String.Join(ExamConsts.Splitter, _selectedAnswerIds),
                    Right = right
                });
        }
    }
}