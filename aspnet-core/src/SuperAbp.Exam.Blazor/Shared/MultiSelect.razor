

<style>
    .chooses .ant-checkbox-wrapper {
        width: 100%;
        padding: 9px 20px 9px 5px;
        -ms-border-radius: 4px;
        border-radius: 4px;
        border: 1px solid #d9d9d9;
        margin-bottom: 10px;
    }

    .chooses .ant-checkbox {
        display: none;
    }

        .chooses .ant-checkbox + span {
            width: 100%;
        }

    .chooses .ant-checkbox-wrapper .tag {
        width: 10px;
        font-weight: bold;
        color: #1890ff;
    }

    .chooses .ant-checkbox-wrapper .content {
        color: #000;
        margin-left: 5px;
    }

    .chooses .ant-checkbox-wrapper + .ant-checkbox-wrapper {
        margin-left: 0px;
    }
    .chooses .result {
        display: none;
    }

        .chooses .result.show {
            display: block;
        }
    .chooses .result span {
        vert-align: middle;
        font-size: 1rem;
    }
</style>

<CheckboxGroup class="chooses" ValueChanged="OnChange">
    @for (int i = 0; i < Answers.Count; i++)
    {
        var tempIndex = i;
        var answer = Answers[tempIndex];
        <Checkbox>
            <div style="display: flex; -o-justify-content: space-between; -webkit-justify-content: space-between; justify-content: space-between;">
                <div>
                    <span class="tag">@Convert.ToChar(65 + tempIndex)</span>
                    <span class="content">@answer.Content</span>
                </div>
                @if (answer.Right)
                {
                    <div class="@GetResultColor(answer)">
                        <Icon Type="check-circle" Theme="twotone" TwotoneColor="#52c41a"/>
                        @*<span>答案</span>*@
                    </div>
                }
            </div>
        </Checkbox>
    }
</CheckboxGroup>

@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using SuperAbp.Exam.Blazor.Model
@using Volo.Abp
@using Volo.Abp.AspNetCore.Components.Notifications
@inject IUiNotificationService UiNotificationService
@code {
    [Parameter]
    public Guid QuestionId { get; set; }
    [Parameter]
    public IReadOnlyList<QuestionAnswerListDto> Answers { get; set; }
    [Parameter]
    public List<QuestionAnswerItem> SelectedQuestionAnswers { get; set; }
    [Parameter]
    public bool ShowAnalysis { get; set; }
    [Parameter]
    public EventCallback<QuestionAnswerItem> OnSelected { get; set; }

    List<Guid> _selectedAnswerIds = new List<Guid>();
    protected override void OnParametersSet()
    {
        _selectedAnswerIds = new List<Guid>();
        if (!ShowAnalysis) return;

        var selectedAnswer = SelectedQuestionAnswers.Find(a => a.QuestionId == QuestionId);
        if (selectedAnswer is null)
        {
            _selectedAnswerIds = Answers
                .Where(a => a.Right)
                .Select(a => a.Id)
                .ToList();
        }
        else
        {
            var answerIds = selectedAnswer.AnswerId.Split(",");
            _selectedAnswerIds = answerIds.Select(a => new Guid(a)).ToList();
        }
    }

    string GetResultColor(QuestionAnswerListDto answer)
    {
        List<string> classes = new List<string>() { "result" };
        if (ShowAnalysis && answer.Right)
        {
            classes.Add("show");
        }
        return String.Join(" ", classes);
    }

    void OnChange(string[] checkedValues)
    {
        //var answer = Answers.FirstOrDefault(a => a.Id == answerId);
        //if (answer is null)
        //{
        //    await UiNotificationService.Error("请先选择答案");
        //    return;
        //}
        //var right = answer.Right;
        //await OnSelected.InvokeAsync(new QuestionAnswerItem()
        //{
        //    QuestionId = QuestionId,
        //    AnswerId = answerId.ToString(),
        //    Right = right
        //});
    }
}
