

<style>
    .chooses .choose-item {
        padding: 9px 20px 9px 5px;
        -ms-border-radius: 4px;
        border-radius: 4px;
        border: 1px solid #d9d9d9;
        margin-bottom: 10px;
        display: flex;
        -o-justify-content: space-between;
        -webkit-justify-content: space-between;
        justify-content: space-between;
    }

    .chooses .tag {
        width: 10px;
        font-weight: bold;
        color: #1890ff;
    }
    .chooses .choose-item.primary {
            border-color: #1890ff;
        }

    .chooses .choose-item .body {
        padding: 0 8px;
    }

    .chooses .choose-item .content {
        color: #000;
        margin-left: 5px;
    }

        .chooses .choose-item .result {
            display: none;
        }

            .chooses .choose-item .result.show {
                display: block;
            }

            .chooses .choose-item .result span {
                vert-align: middle;
                font-size: 1rem;
            }
</style>

@*TODO:CheckboxGroup的Disabled只有与Options配合时才有效*@
<div class="chooses">
    @for (int i = 0; i < Answers.Count; i++)
    {
        var tempIndex = i;
        var answer = Answers[tempIndex];
        <div class="@GetBorderColor(answer)">
            <div class="body">
                <div>
                    <span class="tag">@Convert.ToChar(65 + tempIndex)</span>
                    <span class="content">@answer.Content</span>
                </div>
                @if (answer.Right)
                {
                    <div class="@GetResultClass(answer)">
                        <Icon Type="check-circle" Theme="twotone" TwotoneColor="#52c41a" />
                        @*<span>答案</span>*@
                    </div>
                }
            </div>
            </div>
    }
</div>
@*<CheckboxGroup class="chooses" ValueChanged="@OnChange">
    @for (int i = 0; i < Answers.Count; i++)
    {
        var tempIndex = i;
        var answer = Answers[tempIndex];
        <Checkbox Class="@GetBorderColor(answer)">
            <div style="display: flex; -o-justify-content: space-between; -webkit-justify-content: space-between; justify-content: space-between;">
                <div>
                    <span class="tag">@Convert.ToChar(65 + tempIndex)</span>
                    <span class="content">@answer.Content</span>
                </div>
                @if (answer.Right)
                {
                    <div class="@GetResultClass(answer)">
                        <Icon Type="check-circle" Theme="twotone" TwotoneColor="#52c41a"/>
                    </div>
                }
            </div>
        </Checkbox>
    }
</CheckboxGroup>*@
<Button Type="@ButtonType.Primary" Size="@ButtonSize.Small" OnClick="ValidateAsync">确认答案</Button>

@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using SuperAbp.Exam.Blazor.Model
@using Volo.Abp
@using Volo.Abp.AspNetCore.Components.Notifications
@inject IUiNotificationService UiNotificationService
@code {
    [Parameter]
    public Guid QuestionId { get; set; }
    [Parameter]
    public IReadOnlyList<QuestionAnswerListDto> Answers { get; set; }
    [Parameter]
    public List<QuestionAnswerItem> SelectedQuestionAnswers { get; set; }
    [Parameter]
    public bool ShowAnalysis { get; set; }
    [Parameter]
    public EventCallback<QuestionAnswerItem> OnSelected { get; set; }

    Guid[] _selectedAnswerIds = Array.Empty<Guid>();
    protected override void OnParametersSet()
    {
        _selectedAnswerIds = Array.Empty<Guid>();
        if (!ShowAnalysis) return;

        var selectedAnswer = SelectedQuestionAnswers.Find(a => a.QuestionId == QuestionId);
        if (selectedAnswer is null)
        {
            _selectedAnswerIds = Answers
                .Where(a => a.Right)
                .Select(a => a.Id)
                .ToArray();
        }
        else
        {
            var answerIds = selectedAnswer.AnswerId.Split(",");
            _selectedAnswerIds = answerIds.Select(a => new Guid(a)).ToArray();
        }
    }

    public string GetBorderColor(QuestionAnswerListDto answer)
    {
        List<string> classes = new List<string>() { "choose-item" };
        if (_selectedAnswerIds.Contains(answer.Id))
        {
            classes.Add("primary");
        }
        return String.Join(" ", classes);
    }
    string GetResultClass(QuestionAnswerListDto answer)
    {
        List<string> classes = new List<string>() { "result" };
        if (ShowAnalysis && answer.Right)
        {
            classes.Add("show");
        }
        return String.Join(" ", classes);
    }

    void OnChange(string[] checkedValues)
    {
        _selectedAnswerIds = checkedValues.Select(v => new Guid(v)).ToArray();
    }
    async Task ValidateAsync()
    {
        if (_selectedAnswerIds.Length <= 0)
        {
            await UiNotificationService.Error("请先选择答案");
            return;
        }
        var rightIds = Answers
            .Where(a => a.Right)
            .Select(a => a.Id)
            .ToArray();
        bool right = _selectedAnswerIds.Length == rightIds.Length
                     && _selectedAnswerIds.Except(rightIds).ToArray().Length == 0;
        await OnSelected.InvokeAsync(new QuestionAnswerItem()
            {
                QuestionId = QuestionId,
                AnswerId = String.Join(",", _selectedAnswerIds),
                Right = right
            });
    }
}
