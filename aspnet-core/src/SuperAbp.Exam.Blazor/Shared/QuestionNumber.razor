<Card>
    <CardBody>
        <div class="content">
            <div>
                @for (int i = 0; i < Ids.Count; i++)
                {
                    var tempIndex = i;
                    var id = Ids[tempIndex];
                    var color = GetNumberColor(id);
                    <Badge Color="@color" @onclick="async () => await ClickAsync(id)">@(tempIndex + 1)</Badge>
                }
            </div>
        </div>
    </CardBody>
</Card>
@code {
    [Parameter]
    public Guid CurrentId { get; set; }
    [Parameter]
    public EventCallback<Guid> CurrentIdChanged { get; set; }
    [Parameter]
    public IReadOnlyList<Guid> Ids { get; set; }
    [Parameter]
    public IReadOnlyList<Guid> SuccessIds { get; set; } = Array.Empty<Guid>();
    [Parameter]
    public IReadOnlyList<Guid> ErrorIds { get; set; } = Array.Empty<Guid>();
    [Parameter]
    public EventCallback<Guid> OnChanged { get; set; }

    Color GetNumberColor(Guid id)
    {
        if (CurrentId == id)
        {
            return Color.Primary;
        }
        if (SuccessIds.Contains(id))
        {
            return Color.Success;
        }
        if (ErrorIds.Contains(id))
        {
            return Color.Danger;
        }
        return Color.Info;
    }

    async Task ClickAsync(Guid id)
    {
        await CurrentIdChanged.InvokeAsync(CurrentId);
        await OnChanged.InvokeAsync(id);
    }
}
