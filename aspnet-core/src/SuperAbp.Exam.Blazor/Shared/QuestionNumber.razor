﻿<Card>
    <ChildContent>
        <Space Direction="SpaceDirection.Vertical" Style="width: 100%;">
            @{
                int i = 1;
                foreach (QuestionNumberVo numbers in Numbers)
                {
                    <SpaceItem Style="width: 100%;">
                        <Flex Justify="FlexJustify.SpaceBetween" Align="FlexAlign.Center">
                            <h4 style="margin-bottom: 0;">
                                <span>@L["QuestionType:" + numbers.QuestionType]</span>
                            </h4>
                            <span>@L["TotalQuestionCount{0}", numbers.Questions.Count]
                                @if (numbers.TotalScore is > 0)
                                {
                                    <span>/@L["TotalScore{0}", numbers.TotalScore.Value]</span>
                                }
                            </span>
                        </Flex>
                        <Space Size="@(("0", "8"))" Wrap>
                            @foreach (QuestionNumberVo.QuestionIndex question in numbers.Questions)
                            {
                                string color = GetNumberColor(question.QuestionId);
                                int currentIndex = i++;
                                <SpaceItem>
                                    <Tag Color="@color" Style="cursor: pointer;" OnClick="async () => await ClickAsync(question.QuestionId)">@currentIndex</Tag>
                                </SpaceItem>
                            }
                        </Space>
                    </SpaceItem>
                }
            }
        </Space>
    </ChildContent>
</Card>

@using Microsoft.Extensions.Localization
@using SuperAbp.Exam.Localization
@inject IStringLocalizer<ExamResource> L
@code {
    [Parameter]
    public Guid CurrentId { get; set; }
    [Parameter]
    public EventCallback<Guid> CurrentIdChanged { get; set; }
    [Parameter]
    public IReadOnlyList<QuestionNumberVo> Numbers { get; set; }
    [Parameter]
    public IReadOnlyList<Guid> SuccessIds { get; set; } = Array.Empty<Guid>();
    [Parameter]
    public IReadOnlyList<Guid> ErrorIds { get; set; } = Array.Empty<Guid>();
    [Parameter]
    public IReadOnlyList<Guid> AnswerIds { get; set; } = Array.Empty<Guid>();
    [Parameter]
    public EventCallback<Guid> OnChanged { get; set; }

    string GetNumberColor(Guid id)
    {
        if (CurrentId == id)
        {
            return "warning";
        }
        if (SuccessIds.Contains(id))
        {
            return "success";
        }
        if (ErrorIds.Contains(id))
        {
            return "error";
        }
        if (AnswerIds.Contains(id))
        {
            return "processing";
        }
        return "default";
    }

    async Task ClickAsync(Guid id)
    {
        await CurrentIdChanged.InvokeAsync(CurrentId);
        await OnChanged.InvokeAsync(id);
    }
}