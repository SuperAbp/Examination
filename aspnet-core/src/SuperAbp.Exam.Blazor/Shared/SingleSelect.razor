<style>
    .ant-radio-group.ant-radio-group-vertical .ant-radio-wrapper{
        display: flex;
        height: auto;
        line-height: normal;
        width: 100%;
        padding: 9px 20px 9px 5px;
        -ms-border-radius: 4px;
        border-radius: 4px;
        border: 1px solid #d9d9d9;
        margin-bottom: 10px;
    }

        .chooses .ant-radio-wrapper:has(> .primary) {
        border-color: #1890ff;
    } 

    .chooses .ant-radio {
        display: none;
    }

    .chooses .ant-radio-wrapper .form-check-label {
        padding-left: 8px;
        width: 100%;
        }

    .chooses .ant-radio-wrapper .tag {
        width: 10px;
        font-weight: bold;
        color: #1890ff;
    }

    .chooses .ant-radio-wrapper .content {
        color: #000;
        margin-left: 5px;
    }

    .chooses .result {
        display: none;
    }

    .chooses .result.show {
        display: block;
    }
    .chooses .result span {
        vert-align: middle;
        font-size: 1rem;
    }

</style>
@QuestionChanged
@ShowAnalysis
@_selectedAnswerId
<RadioGroup class="chooses" Orientation="Orientation.Vertical" TValue="Guid" CheckedValue="@_selectedAnswerId" CheckedValueChanged="@ValidateAsync" Disabled="ShowAnalysis">
    @for (int i = 0; i < Answers.Count; i++)
    {
        var tempIndex = i;
        var answer = Answers[tempIndex];

        <Radio class="@GetBorderColor(answer)" Value="@answer.Id">
            <div style="display: flex; justify-content: space-between;">
                <div>
                    <span class="tag">@Convert.ToChar(65 + tempIndex)</span>
                    <span class="content">@answer.Content</span>
                </div>
                @if (answer.Right)
                {
                    <div class="@GetResultClass(answer)">
                        <Icon Name="IconName.CheckCircle" IconStyle="IconStyle.Regular" TextColor="TextColor.Success"/>
                    </div>
                }
            </div>
        </Radio>
        }
</RadioGroup>

@using SuperAbp.Exam.TrainingManagement
@using SuperAbp.Exam.Blazor.Pages.QuestionRepos
@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using System.Diagnostics
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Blazor.Pages
@using Volo.Abp
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Notifications
@inject IUiNotificationService UiNotificationService
@inject ITrainingAppService TrainingAppService
@code {
    [Parameter]
    public Guid QuestionId { get; set; }
    [Parameter]
    public IReadOnlyList<QuestionAnswerViewModel> Answers { get; set; }
    [Parameter]
    public List<QuestionAnswerItem> SelectedQuestionAnswers { get; set; }
    [Parameter]
    public bool ShowAnalysis { get; set; }
    [Parameter]
    public EventCallback<QuestionAnswerItem> OnSubmit { get; set; }

    Guid _selectedAnswerId = default;
    bool QuestionChanged = false;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<Guid>(nameof(QuestionId), out var value))
        {
            if (QuestionId != value)
            {
                QuestionChanged = true;
            }
            else
            {
                QuestionChanged = false;
            }
        }

        await base.SetParametersAsync(parameters);
    }
    protected override void OnParametersSet()
    {
        if (QuestionChanged)
        {
            _selectedAnswerId = default;
            if(ShowAnalysis)
            {
                var selectedAnswer = SelectedQuestionAnswers.Find(a => a.QuestionId == QuestionId);
                var answer = selectedAnswer is null
                    ? Answers.Single(a => a.Right)
                    : Answers.First(a => a.Id == new Guid(selectedAnswer.Answer));
                _selectedAnswerId = answer.Id;
            }
        }
    }
    public string GetBorderColor(QuestionAnswerViewModel answer)
    {
        List<string> classes = new List<string>() { "choose-item" };
        if (_selectedAnswerId == answer.Id)
        {
            classes.Add("primary");
        }
        return String.Join(" ", classes);
    }
    string GetResultClass(QuestionAnswerViewModel answer)
    {        
        List<string> classes = new List<string>() { "result" };
        if (ShowAnalysis && answer.Right)
        {
            classes.Add("show");
        }
        return String.Join(" ", classes);
    }

    public async Task ValidateAsync(Guid answerId)
    {
        // TODO:值改变会处罚此方法。click事件早于bind
        if (ShowAnalysis)
        {
            return;
        }        
        var answer = Answers.FirstOrDefault(a => a.Id == answerId);
        if (answer is null)
        {
            await UiNotificationService.Error("请先选择答案");
            return;
        }
        _selectedAnswerId = answerId;
        var right = answer.Right;
        await OnSubmit.InvokeAsync(new QuestionAnswerItem()
        {
            QuestionId = QuestionId,
                Answer = answerId.ToString(),
                    Right = right
        });
    }
}
