 <RadioGroup class="chooses" @bind-Value="_selectedAnswerId" Size="InputSize.Large" TValue="Guid" OnChange="ValidateAsync" Disabled="ShowAnalysis">
     @for (int i = 0; i < Answers.Count; i++)
     {
         var tempIndex = i;
         var answer = Answers[tempIndex];
         <Radio class="@GetBorderColor(answer)" Value="@answer.Id">
             <div style="display: flex; -o-justify-content: space-between; -webkit-justify-content: space-between; justify-content: space-between;">
                 <div>
                     <span class="tag">@Convert.ToChar(65 + tempIndex)</span>
                     <span class="content">@answer.Content</span>
                    @_selectedAnswerId
                 </div>
                 @if (answer.Right.HasValue && answer.Right.Value)
                 {
                     <div class="@GetResultClass(answer)">
                         <Icon Type="check-circle" Theme="IconThemeType.TwoTone" TwotoneColor="#52c41a"/>
                     </div>
                 }
             </div>
         </Radio>
     }
 </RadioGroup>

@using SuperAbp.Exam.TrainingManagement
@using JetBrains.Annotations
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Blazor.Pages
@using Volo.Abp.AspNetCore.Components.Notifications
@inject IUiNotificationService UiNotificationService
@inject ITrainingAppService TrainingAppService
@code {
    [Parameter]
    public Guid QuestionId { get; set; }
    [Parameter]
    public IReadOnlyList<QuestionAnswerViewModel> Answers { get; set; }
    [Parameter]
    public bool ShowAnalysis { get; set; }
    [Parameter] 
    [CanBeNull] 
    public string Answered { get; set; }
    [Parameter]
    public EventCallback<QuestionAnswerItem> OnSubmit { get; set; }

    Guid _selectedAnswerId;
    protected override async Task OnParametersSetAsync()
    {
        _selectedAnswerId = !String.IsNullOrEmpty(Answered) ? Guid.Parse(Answered) : Guid.Empty;
        await base.OnParametersSetAsync();
    }

    public string GetBorderColor(QuestionAnswerViewModel answer)
    {
        List<string> classes = ["choose-item"];
        if (_selectedAnswerId == answer.Id)
        {
            classes.Add("primary");
        }
        return String.Join(" ", classes);
    }
    string GetResultClass(QuestionAnswerViewModel answer)
    {
        List<string> classes = ["result"];
        if (ShowAnalysis && answer.Right.HasValue && answer.Right.Value)
        {
            classes.Add("show");
        }
        return String.Join(" ", classes);
    }

    public async Task ValidateAsync(Guid answerId)
    {
        var answer = Answers.FirstOrDefault(a => a.Id == answerId);
        if (answer is null)
        {
            await UiNotificationService.Error("请先选择答案");
            return;
        }

        bool right = answer.Right ?? false;
        await OnSubmit.InvokeAsync(new QuestionAnswerItem()
            {
                QuestionId = QuestionId,
                Answer = answerId.ToString(),
                Right = right
            });
    }
}