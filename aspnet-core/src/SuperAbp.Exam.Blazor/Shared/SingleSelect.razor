﻿<style>
     .chooses .choose-item {
         width: 100%;
         padding: 9px 20px 9px 5px;
         -ms-border-radius: 4px;
         border-radius: 4px;
         border: 1px solid #d9d9d9;
         margin-bottom: 10px;
     }

         .chooses .choose-item.primary {
             border-color: #1890ff;
         }



     .chooses .ant-radio {
         display: none;
     }

         .chooses .ant-radio + * {
             width: 100%;
         }

     .chooses .choose-item .tag {
         width: 10px;
         font-weight: bold;
         color: #1890ff;
     }

     .chooses .choose-item .content {
         color: #000;
         margin-left: 5px;
     }

     .chooses .result {
         display: none;
     }

         .chooses .result.show {
             display: block;
         }

         .chooses .result span {
             vert-align: middle;
             font-size: 1rem;
         }

</style>
<RadioGroup class="chooses" @bind-Value="_selectedAnswerId" Size="large" TValue="Guid" OnChange="ValidateAsync" Disabled="ShowAnalysis">
    @for (int i = 0; i < Answers.Count; i++)
    {
        var tempIndex = i;
        var answer = Answers[tempIndex];

        <Radio class="@GetBorderColor(answer)" Value="@answer.Id">
            <div style="display: flex; -o-justify-content: space-between; -webkit-justify-content: space-between; justify-content: space-between;">
                <div>
                    <span class="tag">@Convert.ToChar(65 + tempIndex)</span>
                    <span class="content">@answer.Content</span>
                </div>
                @if (answer.Right)
                {
                    <div class="@GetResultClass(answer)">
                        <Icon Type="check-circle" Theme="twotone" TwotoneColor="#52c41a" />
                        @*<span>答案</span>*@
                    </div>
                }
            </div>
        </Radio>
    }
</RadioGroup>

@using SuperAbp.Exam.TrainingManagement
@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using System.Diagnostics
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Blazor.Pages
@using Volo.Abp
@using Volo.Abp.AspNetCore.Components.Notifications
@inject IUiNotificationService UiNotificationService
@inject ITrainingAppService TrainingAppService
@code {
    [Parameter]
    public Guid QuestionId { get; set; }
    [Parameter]
    public IReadOnlyList<QuestionAnswerViewModel> Answers { get; set; }
    [Parameter]
    public List<QuestionAnswerItem> SelectedQuestionAnswers { get; set; }
    [Parameter]
    public bool ShowAnalysis { get; set; }
    [Parameter]
    public string Answered { get; set; }
    [Parameter]
    public EventCallback<QuestionAnswerItem> OnSubmit { get; set; }

    Guid _selectedAnswerId = new Guid();

    protected override void OnInitialized()
    {
        _selectedAnswerId = new Guid();
        if (!Answered.IsNullOrWhiteSpace())
        {
            _selectedAnswerId = new Guid(Answered);
        }
        if (!ShowAnalysis) return;

        var selectedAnswer = SelectedQuestionAnswers.Find(a => a.QuestionId == QuestionId);
        var answer = selectedAnswer is null
            ? Answers.Single(a => a.Right)
            : Answers.First(a => a.Id == new Guid(selectedAnswer.Answer));
        _selectedAnswerId = answer.Id;
    }
    public string GetBorderColor(QuestionAnswerViewModel answer)
    {
        List<string> classes = new List<string>() { "choose-item" };
        if (_selectedAnswerId == answer.Id)
        {
            classes.Add("primary");
        }
        return String.Join(" ", classes);
    }
    string GetResultClass(QuestionAnswerViewModel answer)
    {
        List<string> classes = new List<string>() { "result" };
        if (ShowAnalysis && answer.Right)
        {
            classes.Add("show");
        }
        return String.Join(" ", classes);
    }

    public async Task ValidateAsync(Guid answerId)
    {
        var answer = Answers.FirstOrDefault(a => a.Id == answerId);
        if (answer is null)
        {
            await UiNotificationService.Error("请先选择答案");
            return;
        }
        var right = answer.Right;
        await OnSubmit.InvokeAsync(new QuestionAnswerItem()
            {
                QuestionId = QuestionId,
                Answer = answerId.ToString(),
                Right = right
            });
    }
}