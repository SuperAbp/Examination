<style>
    .question-content .title {
    font-size: 18px;
    }

    .question-content .title .number {
    font-weight: bold;
    }

    .question-content .chooses {
    width: 100%;
    }

    .bottom {
    margin-top: 10px;
    display: flex;
    -o-justify-content: space-between;
    -webkit-justify-content: space-between;
    justify-content: space-between;
    }

    .analysis {
    margin-top: 10px;
    margin-bottom: 10px;
    }

    .ant-tag.current {
    color: #389e0d;
    background: #f6ffed;
    border-color: #b7eb8f;
    }

</style>

@if (loading)
{
    <div style=" text-align: center;margin: 50px 0;">
        <Spin />
    </div>
}
else
{
    <GridRow Gutter="16">
        <GridCol Span="4">
            <QuestionNumber CurrentId="_questionIds[_questionIndex]"
            Numbers="Questions"
            SuccessIds="GetSuccessIds()"
            ErrorIds="GetErrorIds()"
            OnChanged="ShowQuestionAsync"></QuestionNumber>
        </GridCol>
        <GridCol Span="20">
            <Card class="question-content">
                <TitleTemplate>
                    <span @onclick="GoDetail" style="cursor: pointer">
                        <Icon Type="arrow-left" Theme="IconThemeType.Outline" />返回
                    </span>
                    <Divider Type="DividerType.Vertical" />@Title
                </TitleTemplate>
                <ChildContent>
                    @if (loadingQuestion)
                    {
                        <Spin />
                    }
                    else
                    {
                        @if (_question != null)
                        {
                            <QuestionItem Number="_questionIndex + 1"
                            Question="_question"
                            QuestionAnswers="_questionAnswers"
                            ShowAnalysis="_showAnalysis"
                                          Answered="@GetAnswered()"
                            OnSubmit="@SubmitAsync"></QuestionItem>

                        }

                        <div class="bottom">
                            @if (_questionIndex <= 0)
                            {
                                <Button OnClick="PrevAsync" Disabled Icon="@IconType.Outline.ArrowLeft">上一题</Button>
                            }
                            else
                            {
                                <Button OnClick="PrevAsync" Icon="@IconType.Outline.ArrowLeft">上一题</Button>
                            }
                            @if (favorited)
                            {
                                <Icon Type="star" Theme="IconThemeType.Fill" Style="cursor: pointer;" OnClick="@(async () => await FavoriteAsync(false))"></Icon>
                            }
                            else
                            {
                                <Icon Type="star" Theme="IconThemeType.Outline" Style="cursor: pointer;" OnClick="@(async () => await FavoriteAsync(true))" />
                            }

                            @if (_questionIndex >= _questionIds.Length - 1)
                            {
                                <Button OnClick="NextAsync" Disabled Icon="@IconType.Outline.ArrowRight">下一题</Button>
                            }
                            else
                            {
                                <Button OnClick="NextAsync" Icon="@IconType.Outline.ArrowRight">下一题</Button>
                            }

                        </div>
                    }
                </ChildContent>
            </Card>
        </GridCol>
    </GridRow>
}
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Blazor.Pages
@using SuperAbp.Exam.Favorites
@using SuperAbp.Exam.QuestionManagement.QuestionAnswers
@using SuperAbp.Exam.QuestionManagement.Questions
@using SuperAbp.Exam.TrainingManagement
@inject NavigationManager Navigation
@inject IQuestionAppService QuestionAppService
@inject IQuestionAnswerAppService QuestionAnswerAppService
@inject ITrainingAppService TrainingAppService
@inject IFavoriteAppService FavoriteAppService
@code {
    [Parameter]
    public int? TrainType { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string BackUrl { get; set; }
    [Parameter]
    public List<QuestionNumberVo> Questions { get; set; }

    bool favorited = false;
    bool loading = true;
    bool loadingQuestion = false;
    Guid[] _questionIds = [];
    bool _showAnalysis = false;
    int _questionIndex = 0;
    QuestionDetailDto _question;
    readonly Dictionary<Guid, Tuple<QuestionDetailDto, IReadOnlyList<QuestionAnswerViewModel>>> _cacheQuestions = new();
    IReadOnlyList<QuestionAnswerViewModel> _questionAnswers = Array.Empty<QuestionAnswerViewModel>();
    IReadOnlyList<TrainingListDto> _trains = Array.Empty<TrainingListDto>();
    readonly List<QuestionAnswerItem> _selectedQuestionAnswers = new();

    protected override async Task OnInitializedAsync()
    {
        if (Questions.Count <= 0)
        {
            GoDetail();
            return;
        }
        _questionIds = Questions.SelectMany(q => q.Questions.Select(i => i.QuestionId)).ToArray();        

        int maxIndex = 0;
        if (TrainType is null or 0)
        {
            var trainResult = await TrainingAppService.GetListAsync(new GetTrainsInput() { TrainingSource = TrainingSource.Favorite });
            _trains = trainResult.Items;

            maxIndex = _trains.Count > 0
                ? _trains.Max(t => _questionIds.ToList().IndexOf(t.QuestionId))
                : 0;
            if (maxIndex >= _questionIds.Length || maxIndex < 0)
            {
                maxIndex = 0;
            }
        }
        await ShowQuestionAsync(maxIndex);
        loading = false;
    }
    Guid[] GetSuccessIds()
    {
        return _trains.Where(a => a.Right).Select(a => a.QuestionId).Union(
            _selectedQuestionAnswers.Where(a => a.Right).Select(a => a.QuestionId))
            .ToArray();
    }
    Guid[] GetErrorIds()
    {
        return _trains.Where(a => !a.Right).Select(a => a.QuestionId).Union(
            _selectedQuestionAnswers.Where(a => !a.Right).Select(a => a.QuestionId))
            .ToArray();
    }

    protected string GetAnswered()
    {
        return string.Join(ExamConsts.Splitter, _selectedQuestionAnswers.Where(c => c.QuestionId == _question.Id).Select(c => c.Answer));
    }
    public async Task NextAsync()
    {
        if (_questionIndex >= _questionIds.Length)
        {
            _questionIndex = _questionIds.Length - 1;
            return;

        }

        await ShowQuestionAsync(_questionIndex + 1);
    }
    public async Task PrevAsync()
    {
        if (_questionIndex < 0)
        {
            _questionIndex = 0;
            return;
        }
        await ShowQuestionAsync(_questionIndex - 1);
    }
    async Task ShowQuestionAsync(int index)
    {
        await ShowQuestionAsync(_questionIds[index]);
    }
    public async Task ShowQuestionAsync(Guid id)
    {
        _questionIndex = _questionIds.ToList().IndexOf(id);
        loadingQuestion = true;
        _showAnalysis = false;
        favorited = await FavoriteAppService.GetByQuestionIdAsync(id);
        await LoadQuestionAsync(id);
        if (TrainType is 1 || _selectedQuestionAnswers.Any(a => a.QuestionId == id))
        {
            _showAnalysis = true;
        }

        loadingQuestion = false;
    }

    private async Task LoadQuestionAsync(Guid id)
    {
        if (_cacheQuestions.ContainsKey(id))
        {
            _question = _cacheQuestions[id].Item1;
            _questionAnswers = _cacheQuestions[id].Item2.Select(i => new QuestionAnswerViewModel
                {
                    Id = i.Id,
                    Content = i.Content,
                    Right = i.Right
                }).ToArray();
        }
        else
        {
            _question = await QuestionAppService.GetAsync(id);
            _questionAnswers = (await QuestionAnswerAppService.GetListAsync(id)).Items.Select(i => new QuestionAnswerViewModel
                {
                    Id = i.Id,
                    Content = i.Content,
                    Right = i.Right
                }).ToArray();
            _cacheQuestions.Add(id, new Tuple<QuestionDetailDto, IReadOnlyList<QuestionAnswerViewModel>>(_question, _questionAnswers));
        }
    }
    public async Task SubmitAsync(QuestionAnswerItem item)
    {
        _showAnalysis = true;
        var right = item.Right;
        var training = _trains.SingleOrDefault(t => t.QuestionId == item.QuestionId);
        if (training is null)
        {
            await TrainingAppService.CreateAsync(new TrainingCreateDto()
                {
                    TrainingSource = TrainingSource.Favorite,
                    QuestionBankId = _question.QuestionBankId,
                    QuestionId = item.QuestionId,
                    Right = right
                });
        }
        else
        {
            await TrainingAppService.SetIsRightAsync(training.Id, right);
        }
        _selectedQuestionAnswers.Add(item);
    }
    private async Task FavoriteAsync(bool status)
    {
        if (status)
        {
            await FavoriteAppService.CreateAsync(_question.Id);
            favorited = true;
        }
        else
        {
            favorited = false;
            await FavoriteAppService.DeleteAsync(_question.Id);
        }
    }
    private void GoDetail()
    {
        Navigation.NavigateTo(BackUrl);
    }
}
