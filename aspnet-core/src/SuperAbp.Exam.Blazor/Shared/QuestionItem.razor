<h2 class="title">
    <span class="number">@Number</span>
    <span>@Question.Content</span>
</h2>
@switch (QuestionType.FromValue(Question.QuestionType).Name)
{
    case nameof(QuestionType.SingleSelect):
    case nameof(QuestionType.Judge):
        <SingleSelect QuestionId="Question.Id"
                      Answers="QuestionAnswers"
                      Answered="@Answered"
                      ShowAnalysis="ShowAnalysis"
                      OnSubmit="@SubmitAsync"></SingleSelect>
        break;
    case nameof(QuestionType.MultiSelect):
        <MultiSelect QuestionId="Question.Id"
                     Answers="QuestionAnswers"
                     Answered="@Answered"
                     ShowAnalysis="ShowAnalysis"
                     OnSubmit="@SubmitAsync"></MultiSelect>
        break;
    case nameof(QuestionType.FillInTheBlanks):
        <Blank QuestionId="Question.Id"
               Answers="QuestionAnswers"
               Answered="@Answered"
               ShowAnalysis="ShowAnalysis"
               OnSubmit="@SubmitAsync"></Blank>
        break;
}
@if (ShowAnalysis)
{
    <Descriptions Column="1">
    @if (Question.KnowledgePoints.Count > 0)
    {
        <DescriptionsItem Title="@L["KnowledgePoint"]">
            @foreach (string knowledgePoint in Question.KnowledgePoints)
            {
                <Tag>@knowledgePoint</Tag>
            }
        </DescriptionsItem>
    }
   @if (!String.IsNullOrEmpty(Question.Analysis))
    {
        <DescriptionsItem Title="@L["Analysis"]">
                @Question.Analysis
        </DescriptionsItem>
    }
    </Descriptions>
}

@using Microsoft.Extensions.Localization
@using SuperAbp.Exam.Blazor.Model
@using SuperAbp.Exam.Blazor.Pages
@using SuperAbp.Exam.Localization
@using SuperAbp.Exam.QuestionManagement.Questions
@inject IStringLocalizer<ExamResource> L
@code {
    [Parameter]
    public int Number { get; set; }
    [Parameter]
    public bool ShowAnalysis { get; set; }
    [Parameter]
    public QuestionDetailDto Question { get; set; }
    [Parameter]
    public IReadOnlyList<QuestionAnswerViewModel> QuestionAnswers { get; set; }
    [Parameter]
    public string Answered { get; set; }
    [Parameter]
    public EventCallback<QuestionAnswerItem> OnSubmit { get; set; }

    public async Task SubmitAsync(QuestionAnswerItem item)
    {
        await OnSubmit.InvokeAsync(item);
    }
}
